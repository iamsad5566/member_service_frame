basePath: /
definitions:
  object.User:
    properties:
      account:
        type: string
      birthday:
        type: string
      gender:
        type: string
      password:
        type: string
      userID:
        type: string
    type: object
  request.UpdateUserPassword:
    properties:
      account:
        type: string
      birthday:
        type: string
      gender:
        type: string
      new_password:
        type: string
      password:
        type: string
      userID:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a RESTful API service for member service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Member Service API
  version: 1.0.1
paths:
  /create_table:
    post:
      consumes:
      - application/json
      description: Creates a new table in the database.
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Success, content: true if the table was successfully
            created'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'message: Internal server error, content: error description'
          schema:
            additionalProperties: true
            type: object
      summary: Create table
      tags:
      - table
  /member/check_exists_id:
    post:
      consumes:
      - application/json
      description: Checks if a user ID already exists in the database.
      parameters:
      - description: User ID to check
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/object.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Success, content: true if the user ID does not exist'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'message: Account exists, content: false if the user ID already
            exists'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'message: Internal server error, content: Error description'
          schema:
            additionalProperties: true
            type: object
      summary: Check user ID
      tags:
      - user
  /member/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a token if the authentication is successful.
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/object.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Success, content: Token'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'message: Unauthorized, content: Error description'
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - user
  /member/register:
    post:
      consumes:
      - application/json
      description: Registers a new user if the account does not already exist.
      parameters:
      - description: User to register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/object.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User registered successfully'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'message: Bad request, content: Account already exists'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'message: Internal server error, content: Error description'
          schema:
            additionalProperties: true
            type: object
      summary: Register user
      tags:
      - user
  /member/update_password:
    post:
      consumes:
      - application/json
      description: Updates the password for a user.
      parameters:
      - description: User ID and new password
        in: body
        name: updateUserPassword
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Success, content: true if the password was successfully
            updated'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'message: Unauthorized, content: Password incorrect'
          schema:
            additionalProperties: true
            type: object
      summary: Update user password
      tags:
      - user
  /oauth2/{provider}/login:
    get:
      description: Redirects user to the OAuth2 provider's consent page to ask for
        permission.
      parameters:
      - description: OAuth2 Provider
        in: path
        name: provider
        required: true
        type: string
      produces:
      - text/html
      responses:
        "302":
          description: Redirects to the OAuth2 provider's consent page
          schema:
            type: string
      summary: OAuth2 login
      tags:
      - auth
  /oauth2/{provider}/register:
    get:
      description: Redirects user to the OAuth2 provider's consent page to ask for
        permission.
      parameters:
      - description: OAuth2 Provider
        in: path
        name: provider
        required: true
        type: string
      produces:
      - text/html
      responses:
        "302":
          description: Redirects to the OAuth2 provider's consent page
          schema:
            type: string
      summary: OAuth2 registration
      tags:
      - auth
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
