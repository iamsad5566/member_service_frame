// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/create_table": {
            "post": {
                "description": "Creates a new table in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "table"
                ],
                "summary": "Create table",
                "responses": {
                    "200": {
                        "description": "message: Success, content: true if the table was successfully created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "message: Internal server error, content: error description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/member/check_exists_id": {
            "post": {
                "description": "Checks if a user ID already exists in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Check user ID",
                "parameters": [
                    {
                        "description": "User ID to check",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Success, content: true if the user ID does not exist",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "message: Account exists, content: false if the user ID already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "message: Internal server error, content: Error description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/member/login": {
            "post": {
                "description": "Logs in a user and returns a token if the authentication is successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Success, content: Token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "message: Unauthorized, content: Error description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/member/register": {
            "post": {
                "description": "Registers a new user if the account does not already exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User to register",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: User registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "message: Bad request, content: Account already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "message: Internal server error, content: Error description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/member/update_password": {
            "post": {
                "description": "Updates the password for a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "description": "User ID and new password",
                        "name": "updateUserPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateUserPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Success, content: true if the password was successfully updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "message: Unauthorized, content: Password incorrect",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/oauth2/{provider}/login": {
            "get": {
                "description": "Redirects user to the OAuth2 provider's consent page to ask for permission.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "OAuth2 login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth2 Provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the OAuth2 provider's consent page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oauth2/{provider}/register": {
            "get": {
                "description": "Redirects user to the OAuth2 provider's consent page to ask for permission.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "OAuth2 registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth2 Provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to the OAuth2 provider's consent page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "object.User": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "birthday": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "request.UpdateUserPassword": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "birthday": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Member Service API",
	Description:      "This is a RESTful API service for member service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
